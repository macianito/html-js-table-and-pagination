jQuery(function() {

  Paginator = function(options) {

    this.init(options);

  };

  Paginator.prototype.init = function(options) {

      if(this.initiated && !options)
        return;

      options = options || {};

      this.currentPage       = options.currentPage       || 0;
      this.elementsPerPage   = options.elementsPerPage   || 10;
      this.elementsPaginador = options.elementsPaginador || 3;
      this.paginatorObj      = options.paginatorObj      || jQuery('#paginator');
      this.wrapperElements   = options.wrapperElements   || jQuery('#wrapper-elements');
      this.selectorElements  = options.selectorElements  || '.element';
      
      this.onChangePage      = options.onChangePage  || function() {};
      
      

      this.paginatorObj.off();

      var self = this;

      this.paginatorObj.on('click', 'a', function(evt) {

        evt.preventDefault();

        self.changePage(jQuery(evt.target).data('page'));

      });

      this.initiated = true;

      this.changePage(this.currentPage);

    };

    Paginator.prototype.createPaginator = function () { // Pagination

      var rows = this.wrapperElements.find(this.selectorElements + ':not(.row-hidden)'),
          numRows = rows.length,
          pages = Math.ceil(numRows / this.elementsPerPage);

      this.paginatorObj.empty();

      var half = Math.floor(this.elementsPaginador / 2);


      if(this.currentPage - half > 0) {
        this.paginatorObj
          .append('[ <a data-page="0" href="#" >|&lt;</a> ] ')
          .append('[ <a data-page="' + (this.currentPage - 1) + '" href="#" >&lt;</a> ] ');
      }

      var page    = Math.max(this.currentPage - half, 0),
          limitNums = Math.min(page + this.elementsPaginador, pages);

      while(page++ < limitNums) {

        var pageIndex = (page - 1); // real num of page

        var selected = pageIndex === this.currentPage ? ' selected ' : '';

        this.paginatorObj.append(' [ <a data-page="' + pageIndex + '" class="' + selected + '" href="#">' + page + '</a> ] ');

      }

      if(limitNums < pages) {
        this.paginatorObj
          .append(' [ <a data-page="' + limitNums + '" href="#" >&gt;</a> ] ')
          .append(' [ <a data-page="' + (pages - 1) + '" href="#" >&gt;|</a> ] ');
      }

    };


    Paginator.prototype.changePage = function(page) { // Pagination

      this.currentPage = page;

      var rows = this.wrapperElements.find(this.selectorElements + ':not(.row-hidden)');

      rows.hide();

      rows.slice(this.currentPage * this.elementsPerPage, (this.currentPage + 1) * this.elementsPerPage).show();

      this.onChangePage();

      this.createPaginator();
    };

    Paginator.prototype.reload = function(options) {

      this.init(jQuery.extend(this, options));

    };

    window.pagination = new Paginator({
    	elementsPerPage : jQuery('#elements-page').val(),
      selectorElements: 'tr',
      wrapperElements: jQuery('table#boxcom-users tbody'),
      onChangePage: function() { pantallaGestionCursos.hide(); } 
    });


});


// ORDERING ///////////////////////////7



  Table = function(options) {

    this.tableObj     =  options.tableObj     || jQuery('#table');
    this.searchInput  =  options.searchInput  || jQuery('#search');
    this.sortDataType =  options.sortDataType || ['int', null, 'string', 'string', 'string', 'string', 'string',
                                                  'string', 'string', 'string', 'string', 'string', 'string', 'string', 
                                                  'string', 'string', 'string', 'string', 'string', 'string', 'string']; // array amb els tipus collacio per l'ordenacio de cada columna

    _setEvents.call(this);

  };



  Table.prototype.orderByIndex = function(index, typeData, asc) {

    var tBody = this.tableObj.children('tbody'),
        rows = tBody.find('tr').toArray(),
        arrayToSort = new Array(),
        arrayAssoc = {};


    for(var i = 0; i < rows.length; i++) {

      var rowDom = rows[i],
          rowHtml = $(rowDom).children('td:eq(' + index + ')').html();

      arrayToSort.push(rowHtml);

      arrayAssoc[rowHtml] ? arrayAssoc[rowHtml].push(rowDom) : arrayAssoc[rowHtml] = [rowDom];

    }

    if(typeData === 'string') {

      asc ? arrayToSort.sort(_compareStringsAsc) : arrayToSort.sort(_compareStringsDesc);

    } else {

      arrayToSort.sort(function (a, b) { return asc ? a - b : b - a ; } );

    }

    //tBody.empty();


    for(var i = 0; i < arrayToSort.length; i++) {

      var arrayRows = arrayAssoc[arrayToSort[i]];

      for(var j = 0; j < arrayRows.length; j++) {

        tBody.append(arrayRows[j]);

      }

    }

    //console.log(arrayToSort);

  };

  function _compareStringsDesc(a, b) {

    var A = a.toUpperCase(), // ignore upper and lowercase
        B = b.toUpperCase(); // ignore upper and lowercase

    if(A > B) return -1;
    if(A < B) return 1;
    return 0; // names must be equal

  }

  function _compareStringsAsc(a, b) {

    var A = a.toUpperCase(), // ignore upper and lowercase
        B = b.toUpperCase(); // ignore upper and lowercase

    if(A < B) return -1;
    if(A > B) return 1;
    return 0; // names must be equal

  }

  var _setEvents = function() {

    /// ORDENATION ////////////

    var tableHeaders = this.tableObj.find('> thead > tr > th'),
        self = this;

    this.tableObj.off().on('click', '> thead > tr > th', function() {

      var header = $(this);
          index = header.index();

      if(!self.sortDataType[index])
        return;

      if(!header.is('.asc, .desc')) {

        tableHeaders.removeClass('asc desc');

        header.toggleClass('asc');

      } else {

        header.toggleClass('asc desc');
      }

      var sortDataType = self.sortDataType[index];

      self.orderByIndex(index, sortDataType, header.hasClass('asc') ? true : false);

      pagination.reload();

    });

    // SEARCH BOX ////////////////

    this.searchInput.on('keyup', function() {

      var searchVal = this.value,
          rows = self.tableObj.find('tbody tr');


      if(searchVal === '') {
        rows.removeClass('row-hidden');
        pagination.reload();
        return;
      }
      
      if(searchVal.indexOf(('&')) === - 1 ) { // sino hi ha un & es el car que que hi ha OR o res
      
	      searchVal = searchVal.split('|');
	      
	      searchVal.forEach(function(item, index, arr) { // TRIM
			arr[index] = item.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, ''); // fem trim
		  });
		  
		  searchVal = searchVal.join('|');
	
	      var searchValRegex = new RegExp('(' +searchVal + ')', "i");
	
	      rows.each(function() {
	
	        var element = $(this),
	            //children = element.children('.name, .email, .login'), // restringit
	            children = element.children('td');
	            
	        var strRow = children.map(function() { // construim cadena amb tots els elements fila
			  return this.innerHTML;
			})
			.get()
			.join(' '); // frases separades per espai per evitar que la unio de dues cel-les doni error perque es formi una paraula que s'esta cercant

	        if(searchValRegex.test(strRow))
	           element.removeClass('row-hidden');
	        else
	           element.addClass('row-hidden');
	
	      });

      } else { // AND/&
      	
      	searchVal = searchVal.split('&');
      	
      	searchVal.forEach(function(item, index, arr) { // TRIM
		  arr[index] = item.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, ''); // fem trim
		});
      	
      	rows.each(function() {
	
	        var element = $(this),
	            //children = element.children('.name, .email, .login'), // restringit
	            children = element.children('td'),
	            found = true;
	            
	        var strRow = children.map(function() {
			  return this.innerHTML;
			})
			.get()
			.join(' ');
 
	        for(var len = searchVal.length, i = 0; i < len; i++) {
	
	          if(strRow.indexOf(searchVal[i]) === -1) { // si una search word no la troba dins la cadena formada per tota la fila s'ha de ocultar aquella fila
	          	element.addClass('row-hidden');
	            return;
	          }
	
	        }
	        
	        element.removeClass('row-hidden');
	
	     });
      	
      	
      }

      pagination.reload();

    });

  }

